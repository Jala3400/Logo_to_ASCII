use std::process::Command;

#[test]
fn cross() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("./images/Cross_Calatrava.png")
        .arg("--verbose")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
Characters:  .Â·'pqbd8
Image dimensions: 480x480
Number of characters: 60x30
                             ..                             
                            .88.                            
                          Â·888888Â·                          
                          '888888'                          
                     ....  '8888'  ....                     
                  Â·8888888. 8888 .8888888Â·                  
                  888888888888888888888888                  
                  8888   'd8888888'   8888                  
                   d88p    888888    q88b                   
          Â·88888b.   '88p  '8888'  q88'   .d88888Â·          
         .88888888b     '8Â· 8888 Â·8'     d88888888.         
         88888   '88     .8 8888 8.     88'   88888         
         '8888.    '8. ..'' 8888 ''.. .8'    .8888'         
    Â·88p.  '8888Â·..  ''''   8888   ''''  ..Â·8888'  .q88Â·    
 ..888888888888888888888888888888888888888888888888888888.. 
  '888888888888888888888888888888888888888888888888888888'  
    '88'   .8888'    .Â·Â·Â·   8888   Â·Â·Â·.    '8888.   '88'    
         .8888'    d8'  '.. 8888 ..'  '8b    '8888.         
         88888   q88      8 8888 8      88p   88888         
         '88888888'     Â·8' 8888 '8Â·     '88888888'         
          '88888'    q88'  .8888.  '88p    '88888'          
                  .888'    p8888q    '888.                  
                  8888   .88888888.   8888                  
                  888888888888888888888888                  
                  '8888888' 8888 '8888888'                  
                      '''  .8888.  '''                      
                          .888888.                          
                          '888888'                          
                            '88'                            
                             ''                             
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_nv() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("./images/Cross_Calatrava.png")
        .arg("-n")
        .arg("-v")
        .arg("--verbose")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
Characters:  .Â·'pqbd8
Image dimensions: 480x480
Number of characters: 60x30
88888888888888888888888888888bd88888888888888888888888888888
88888888888888888888888888888  88888888888888888888888888888
88888888888888888888888888b      d88888888888888888888888888
88888888888888888888888888p      p88888888888888888888888888
888888888888888888888888888p    q888888888888888888888888888
888888888888888888b       8b    d8       d888888888888888888
88888888888888888b                        d88888888888888888
88888888888888888b    888qp      qp888    d88888888888888888
888888888888888888bp  d8888p    q8888b  qd888888888888888888
8888888888b     '888bq  '88b    d88'  pd888'     d8888888888
888888888b        d88888q db    db p88888b        d888888888
888888888     88bp  888888 b    d 888888  qd88     888888888
888888888q    8888bp 8888ppb    dqq8888 qd8888    p888888888
8888b  88888    888888qpp88b    d88qpp888888    88888  d8888
888                                                      888
8pq                                                      pq8
8888q qpq88b   qpqp888d8888b    d8888b888ppqp   888pqp p8888
8888888888    p8888  p8pq88b    d88pd8q '8888q    d888888888
888888888     888b qd8888p b    d q8888bp d888     888888888
888888888p        q88888b qb    dp d88888p        q888888888
8888888888q     qq8888  pd8b    d8bq  8888pp     p8888888888
8888888888888888888   q8888      8888p   8888888888888888888
888888888888888888    8888        8888    888888888888888888
88888888888888888b                        d88888888888888888
888888888888888888q       pb    dq       p888888888888888888
888888888888888888888pqpq88b    d88pqpq888888888888888888888
888888888888888888888888888      888888888888888888888888888
88888888888888888888888888q      p88888888888888888888888888
8888888888888888888888888888q  p8888888888888888888888888888
88888888888888888888888888888bd88888888888888888888888888888
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_all() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("./images/Cross_Calatrava.png")
        .arg("--all")
        .arg("--verbose")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
Characters:  `._:-~,'";=r^>!<?+vjc\1/*)(}{ziC7|xtoUTsnlfLywuea][YXJVFD52SNIG3$qpmkhZPKA964dbR0gBME8WO&H#Q%@
Image dimensions: 480x480
Number of characters: 60x30
                             ,.                             
                            _@@_                            
                          _@@@@@@_                          
                          "@@@@@@"                          
                    _____  "@@@@"  _____                    
                  _@@@@@@@__@@@@__@@@@@@@_                  
                  @@@@@@@@@@@@@@@@@@@@@@@@                  
                  @@@@   "0@@@@@@#"   @@@@                  
            ___   `4@@L    V@@@@V    g@@#`   ___            
          _@@@@@g_  `*0@g_ '@@@@' _g@B*   _@@@@@@_          
         /@@@@@@@@b     "QL @@@@ /B"     g@@@@@@@@\         
         @@@@@   *@@     _@ @@@@ @_     @@F   @@@@@         
         "@@@@_    *@____`" @@@@ "`____@P    _@@@@"         
    _@@>____@@@@>____"*^*___@@@@L__*^*"____<@@@@____g@@L    
___@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@___
 `"Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B"` 
    "@B*`  _@@@#"`` __==_   @@@@   _==__ ``"0@@@_  `*0@"    
         _@@@@"   ,g@" ``__ @@@@ __`` "@g    "@@@@_         
         @@@@@  _/@#     `@ @@@@ @`     0@L_  @@@@@         
         "@@@@@@@@P    __@F @@@@ *@__    *@@@@@@@@"         
          "@@@@@P`  _<@@P  .@@@@. `*@@>_  `4@@@@@"          
                  ,@@@F    @@@@@&    *@@@.                  
                  @@@@  __@@@@@@@@__  @@@@                  
                  @@@@@@@@@@@@@@@@@@@@@@@@                  
                  "@@@@@@@" @@@@ "@@@@@@B"                  
                     `"""  /@@@@\  """`                     
                          ,@@@@@@,                          
                          "@@@@@B"                          
                            `@@`                            
                             ''                             
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_w100() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("./images/Cross_Calatrava.png")
        .arg("--width")
        .arg("100")
        .arg("--verbose")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
Characters:  .Â·'pqbd8
Original dimensions 480x480
Image dimensions: 800x800
Number of characters: 100x50
                                                 Â·Â·                                                 
                                                 88                                                 
                                               .8888.                                               
                                             8888888888                                             
                                           b888888888888d                                           
                                            888888888888                                            
                                             8888888888                                             
                                   Â·qqpqp     88888888     qpqppÂ·                                   
                               .q888888888b.  88888888  .d888888888b.                               
                              p8888888888888q 88888888'p8888888888888b                              
                             p8888888888888888888888888888888888888888q                             
                            db8888888dd'88888888888888888888'bb8888888db                            
                             d888888b     'p888888888888q'     d888888b                             
                              '888888Â·      '8888888888.      Â·888888'                              
                    .qpp..      '88888p      '88888888'      q88888'      ..qpp.                    
                 .888888888p.     '88888p.    88888888    .q88888'     .q888888888.                 
                .888888888888b       'd8888.  88888888  .d888b'       p888888888888b                
               .888888888888888q        'd88q 88888888 q888'        q888888888888888.               
               b8888888''''88888b         Â·88.88888888Â·88Â·         d88888' 'p8888888d               
               88888888q     88888        888Â·88888888'888        88888     p88888888'              
               88888888q      '888d.      '8bÂ·88888888Â·d8'      .b888'      p88888888               
         .Â·      88888888.      Â·b88bqp88d    88888888'   b88qpd88dÂ·      .88888888      Â·.         
       d8888dq    .'88888888pÂ·.    ''d888'....88888888....'888b''    .Â·q88888888'.    pb8888b       
     .8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888.     
 q8p88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888q8. 
 ''8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888'Â· 
     '8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888'     
       88888d'     8888888p''      q8bqqq.   '88888888'   dqqqd8p      ''88888888     'b88888       
         '      .d8888888'      .8888''88b   Â·88888888    d88''8888.      Â·8888888b.      '         
               d88888888       d888'      qdb'88888888'dbp       b88b       88888888d               
               88888888Â·     q888q        '88Â·88888888'88'        p888p      88888888'              
               b8888888b...p8888b         .88 88888888'88.         '8888q...d8888888d               
               '888888888888888'        .d88' 88888888 '88b.        '888888888888888'               
                88888888888888       p8888b   88888888   d888dq.      88888888888888                
                 Â·b888888888      p888888    p88888888q    888888q      888888888dÂ·                 
                     Â·'''       d8888q8      Â·88888888Â·      8p8888b       '''Â·                     
                              888888b       p8888888888q       d888888                              
                             Â·888888d     qd888888888888bp     b888888Â·                             
                            db8888888qpp88888888888888888888ppp8888888db                            
                             Â·8888888888888888888888888888888888888888Â·                             
                              88888888888888'.88888888 '88888888888888'                             
                               '8888888888d  .d888888b   b8888888888                                
                                     ''''     88888888     ''''                                     
                                            Â·b88888888dÂ·                                            
                                           .888888888888.                                           
                                           d888888888888b                                           
                                             '88888888'                                             
                                               '8888'                                               
                                                 88                                                 
                                                 qp                                                 
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_ofx4_ofy8() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("./images/Cross_Calatrava.png")
        .arg("--ofx")
        .arg("4")
        .arg("--ofy")
        .arg("8")
        .arg("--verbose")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
Characters:  .Â·'pqbd8
Image dimensions: 484x488
Number of characters: 61x31
                              .                              
                              8                              
                           .q888p.                           
                           8888888                           
                           '88888'                           
                   .q8888b  b888d  d8888p.                   
                  Â·88888888p88888q88888888Â·                  
                  8888''''888888888''''8888                  
                  '888.    '88888'    .888'                  
           .qppp.   '888.   88888   .888'   .qppp.           
          p8888888Â·    '88. 88888 .88'    Â·8888888q          
          8888'''88b      8.88888.8      d88'''8888          
          8888.   '88     8'88888'8     88'   .8888          
     ..    '888p    '8pq8   88888   8pp8'    q888'    ..     
    d8888ppp8888888ppppppppp88888ppppppppp8888888ppp8888b    
 Â·888888888888888888888888888888888888888888888888888888888Â· 
    '8888'''8888888'''''''''88888'''''''''8888888'''8888'    
      '   .q888'    .8''8   88888   8''8.    '888p.   '      
          8888'   .88     8'88888'8     88.   '8888          
          8888b.Â·888      d'88888'b      888Â·.d8888          
          '8888888'    Â·88' 88888 '88Â·    '8888888'          
            '''''   Â·888'   88888   'd88Â·   '''''            
                  .888'    d88888b    '888.                  
                  8888b.Â·p888888888pÂ·.d8888                  
                  '88888888'88888'88888888'                  
                    '8888'  8888d  '8888'                    
                           .88888.                           
                           8888888                           
                            '888'                            
                              8                              
                              '                              
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}
