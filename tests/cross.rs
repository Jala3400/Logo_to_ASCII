use std::process::Command;

#[test]
fn cross() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("--path")
        .arg("./images/Cross_Calatrava.png")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
    Characters:  .Â·'pbdq8
Image dimensions: 480x480
Number of characters: 60x30
                             .                              
                            .88                             
                          .888888.                          
                          '888888'                          
                      ...  '8888'  ...                      
                  .8888888. 8888 .8888888.                  
                  888888888888888888888888                  
                  8888   '88888888'   8888                  
                  '888.    888888    Â·888'                  
          .88888p   ''88Â·  '8888   q88'   .q88888.          
         Â·88888888Â·     '8. 8888 Â·8'     d88888888.         
         88888   '8p      8 8888 8      q8'   8888p         
         '8888.   '88.   '' 8888 ''.  .8b    .8888'         
    .8p.   '888p.    ''''   8888   ''''    .q888'   Â·q8.    
  .88888888888888888888888888888888888888888888888888888p.  
 ''888888888888888888888888888888888888888888888888888888'' 
    '88''  .8888'''  ....  '8888   ....  '''8888.  ''88'    
         .8888'    q8' ''.. 8888 . '' '8Â·    '8888.         
         88888   Â·88     '8 8888 8'     88.   88888         
         '88888888'     .8' 8888 'p.     888888888'         
          '888888'   Â·88b  .8888  '88q.   '888888'          
                   q88'    d8888'    '88p                   
                  8888   .q888888p.   8888                  
                  888888888888888888888888                  
                  '8888888' 8888 '8888888'                  
                     ''''  .8888.  ''''                     
                          .888888.                          
                          '888888'                          
                            '88'                            
                             ''                             
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_nv() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("--path")
        .arg("./images/Cross_Calatrava.png")
        .arg("-n")
        .arg("-v")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
    Characters:  .Â·'pbdq8
Image dimensions: 480x480
Number of characters: 60x30
888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888  88888888888888888888888888888
888888888888888888888888888      888888888888888888888888888
88888888888888888888888888p      q88888888888888888888888888
888888888888888888888888888p    q888888888888888888888888888
8888888888888888888       8b    88       8888888888888888888
88888888888888888p                        888888888888888888
88888888888888888p    88qq       qq888    888888888888888888
888888888888888888q   d8888     q8888b  qq888888888888888888
88888888888     '888qq  888p    q88'  qq888'     88888888888
888888888b        d8888pq dp    qb qq8888b        d888888888
888888888     88pp d888888 p    8 888888  qq88     888888888
888888888p    88888p 8888qqp    qqq8888 qq8888    q888888888
8888b '8888p   '88888qqqq88b    d88qqqqd8888'   q8888' 88888
888                                                     '888
qqq                                                      qq8
8888p  qqqpb   qqqqqpbdbbqqp    qqqbbbbqqqqq    8qqqp  q8888
8888888888    q8888' q8pq88p    d88qq8p d8888p    8888888888
888888888     888b q88888p p    8 q88888  8888     888888888
888888888p        q888888 qp    qp 888888p        q888888888
8888888888p     qq8888  qq8p    q8qp '8888qp     q8888888888
888888888888qqq8888'  qq888     d888pp  '8888qqq888888888888
888888888888888888    8888       d8888    888888888888888888
88888888888888888p                        q88888888888888888
888888888888888888p       qp    8p       q888888888888888888
88888888888888888888pqqqq88b    88qqqqqq88888888888888888888
88888888888888888888888888b      888888888888888888888888888
88888888888888888888888888p      q88888888888888888888888888
8888888888888888888888888888q  q8888888888888888888888888888
88888888888888888888888888888pq88888888888888888888888888888
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_all() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("--path")
        .arg("./images/Cross_Calatrava.png")
        .arg("--all")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"
Characters:  `._-':|,^"~;!L>\</+*c]?r=)zvtsli(}xYT7{jfC31uon[JywkVUSIF52meaXPphbEDA6dZOKH94qWG#RNM80$QB%g&@
Image dimensions: 480x480
Number of characters: 60x30
                             ,                              
                            _@@_                            
                          ,@@@@@g,                          
                          "@@@@@@"                          
                    __,,_  \@@@@'  ,,,__                    
                  ,@@@@@@@__@@@@_,@@@@@@@,                  
                  @@@@@@@@@@@@@@@@@@@@@@@@                  
                  @@@@   "&@@@@@@$"   @@@@                  
            ___   '&@@,    8@@@@P    ,@@$`   ___            
          ,@@@@@g_  '*&@>_ '@@@@` _g@&P`  _g@@@@@,          
         ,@@@@@@@@L    `*&, @@@@ /&*`    g@@@@@@@@,         
         @@@@@  `*@g     _@ @@@@ @_     g@P`  @@@@&         
         *@@@@_   '0@_ __"* @@@@ *"__ ,@P`   ,@@@@"         
    ,@g,___"@@@g,____****___@@@@___****____,g@@@"___,g@,    
 _,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@g,_ 
 "*&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&*" 
    *@&P"``,@@@&*""``,,,,``]@@@@```,,,,``""*&@@@_``"*&@*    
         ,@@@@"    g@" ""_, @@@@ ,_"' "@L    "@@@@,         
         @@@@@  _,@$     "@ @@@@ @'     &@,_  @@@@@         
         \@@@@@@@@P    _,@7 @@@@ Yg,_    V@@@@@@@@'         
          *@@@@@D'  _,@@P` .@@@@  '0@g,_  "0@@@@@*          
            ```    g@@P`   g@@@@1   `Y@@g    ```            
                  @@@@   ,g@@@@@@g_   @@@@                  
                  @@@@@@@@@@@@@@@@@@@@@@@@                  
                  *@@@@@@@" @@@@ "@@@@@@@*                  
                    `"^*"  ,@@@@,  "*^"`                    
                          ,@@@@@@,                          
                          *@@@@@@*                          
                            "@@"                            
                             '`                             
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_w100() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("--path")
        .arg("./images/Cross_Calatrava.png")
        .arg("--width")
        .arg("100")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"Characters:  .Â·'pbdq8
Original dimensions 480x480
Image dimensions: 800x800
Number of characters: 100x50
                                                 ..                                                 
                                                 88                                                 
                                               .8888.                                               
                                             Â·8888888q.                                             
                                           q888888888888p                                           
                                           '888888888888                                            
                                            'p888888888                                             
                                    .....    '88888888     ....Â·                                    
                                8888888888p  '8888888p   q8888888888                                
                              d8888888888888pÂ·8888888d q88888888888888                              
                             p8888888888888888888888888888888888888888Â·                             
                             p88888888'8q88888888888888888888'888888888                             
                             8888888q     '8888888888888q''    d888888'                             
                              888888b.      d8888888888'       888888b                              
                   .......     '888888p      .88888888q      888888b'      ....                     
                 Â·p88888888q     '888888q    q88888888     q888888      q88888888pÂ·                 
                8888888888888q      '88888b   88888888   d88888       q888888888888p                
               Â·888888888888888.        8888p 88888888 .8888        q888888888888888                
               p8888888d'Â·'88888q         '88.88888888.8q'         q88888'Â·'p88888888               
               88888888Â·     '888q        q88'88888888q8dq        d888Â·     p88888888               
               88888888q      '8888       888.88888888.88''      888d      .d88888888               
         .      '8888888dÂ·      '888p.q88p   '88888888    q88.qq888'      Â·p8888888'      .         
       p88888.    '8888888bqÂ·      b8b''''   .88888888.   ''''888      .q88888888     .q8888q       
     .888888888888888888888888888888888888888888888888888888888888888888888888888888888888888q      
 Â·pq88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888bq. 
''888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888''
     '8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888'     
       888888''   'p88888888'''    qq8888    '88888888'   .8888qp    '''88888888p    ''888888       
         '      Â·d8888888'      Â·q8888888b   .88888888    d8888888pÂ·      '88888888       '         
               p8888888d       d888'      88pÂ·88888888qp88      '8888       88888888p               
               88888888.     .888d        888'88888888q8qp'      Â·8888.     b88888888               
               b88888888. .p88888          88'88888888 8dÂ·         888888. .q88888888               
               q888888888888888'        .d88b 88888888 888b.        d888888888888888'               
                q888888888888d       .p8888'  88888888  '8888d.      '8888888888888b                
                 '888888888d'     .q8888d'   d88888888    '88888pq.    '8888888888'                 
                    ''.'''      d888888      Â·88888888d      888888p      '''.'''                   
                              p888888Â·      q8888888888.      Â·888888p                              
                             d888888d     .q888888888888d      d888888.                             
                             p8888888p88d888888888888888888b88d88888888                             
                             88888888888888888888888888888888888888888.                             
                              88888888888888b.88888888 d8888888888888d'                             
                               '88888888888'  88888888  '88888888888'                               
                                   '''''''   .88888888    '''''Â·'                                   
                                            Â·8888888888Â·                                            
                                            888888888888                                            
                                           d888888888888'                                           
                                             Â·88888888Â·                                             
                                               '8888'                                               
                                                '88                                                 
                                                 8'                                                 
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}

#[test]
fn cross_ofx4_ofy8() {
    let output = Command::new("cargo")
        .arg("run")
        .arg("--")
        .arg("--path")
        .arg("./images/Cross_Calatrava.png")
        .arg("--ofx")
        .arg("4")
        .arg("--ofy")
        .arg("8")
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8_lossy(&output.stdout);
    let expected = r#"Characters:  .Â·'pbdq8
Image dimensions: 484x488
Number of characters: 61x31
                              .                              
                              8                              
                            q888Â·                            
                           8888888                           
                           '88888'                           
                    Â·q888p  88888  q888p.                    
                  Â·88888888Â·88888q88888888.                  
                  88888''88888888888''88888                  
                  '888.    888888'    .888'                  
            Â·qqÂ·.   '88p.   88888   .q88'   .Â·qp.            
          Â·8888888.   ''88. 88888 .88'    .8888888.          
          88888''88p      8 88888.8      q88''88888          
          8888.   '8p     8 88888'8     88'   .8888          
      .   '8888.    '8p.8   88888   8.q8'    Â·888b'   .      
    d8888qÂ·Â·q88888qqqqqqqqqq88888qqqqqqqqqq88888pÂ·Â·q8888Â·    
 Â·88888888888888888888888888888888888888888888888888888888pÂ· 
    8888888888888888888888888888888888888888888888888888'    
     ''    q888'    .qb'8   88888   8'8p.    '888Â·   '''     
          8888'   .88     8 88888Â·8    '88.   '8888          
          8888Â·..888      q 88888'p      88p..d8888          
          '8888888'    .q8' 88888 '8p.    '8888888'          
           ''88''   .888'   88888   '88q.   ''88''           
                  .888'    d88888Â·    '888                   
                  8888Â·..q888888888p..d8888                  
                  '88888888'88888'88888888'                  
                   ''88888  8888' '88888''                   
                           .88888                            
                           8888888                           
                           ''888''                           
                             '8                              
                              '                              
[0m"#;
    assert_eq!(stdout.trim(), expected.trim());
}
